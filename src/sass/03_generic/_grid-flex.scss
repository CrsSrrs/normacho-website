/*------------------------------------*\
    GRID FLEXBOX
\*------------------------------------*/

@use "sass:math";

@mixin grid-flex {
  .container-fluid {
    margin-right: auto;
    margin-left: auto;
    padding-right: 2rem;
    padding-left: 2rem;
  }
  .row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: -$grid-gutter-width*0.5;
    margin-left: -$grid-gutter-width*0.5;
    &.reverse {
      flex-direction: row-reverse;
    }
  }
  $grid-classes: '';
  @for $i from 1 through $grid-columns {
    $grid-classes: $grid-classes+'.col-#{$i}, .col-xl-#{$i}, .col-lg-#{$i}, .col-md-#{$i}, .col-sm-#{$i}, .col-xs-#{$i}, ';
  }
  #{$grid-classes} {
    @include grid-flex-basics();
  }
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      @include grid-flex-col($i);
    }
  }
  @for $i from 0 through $grid-columns {
    .col-offset-#{$i} {
      margin-left: #{math.div($i, $grid-columns) * 100%};
    }
  }
  @for $i from 0 through $grid-columns {
    .col-pull-#{$i} {
      margin-left: #{math.div($i, $grid-columns) * (-1) * 100%};
    }
  }
  @each $device,
  $screen-device in (xl, $screen-xl),
  (lg, $screen-lg),
  (md, $screen-md),
  (sm, $screen-sm),
  (xs, $screen-xs) {
    @media #{$screen-device} {
      @for $i from 1 through $grid-columns {
        .col-#{$device}-#{$i} {
          @include grid-flex-col($i);
        }
      }
      @for $i from 0 through $grid-columns {
        .col-#{$device}-offset-#{$i} {
          margin-left: #{math.div($i, $grid-columns) * 100%};
        }
      }
      @for $i from 0 through $grid-columns {
        .col-#{$device}-pull-#{$i} {
          margin-left: #{math.div($i, $grid-columns) * (-1) * 100%};
        }
      }
    }
  }
  @media only screen and (max-width: $page-max-size+$grid-gutter-width) {
    .row {
      margin: 0;

      //nested rows still should have negative margin
      .row {
        margin-right: -$grid-gutter-width*0.5;
        margin-left: -$grid-gutter-width*0.5;
      }
    }
  }
}

@mixin grid-flex-basics() {
  padding-left: $grid-gutter-width*0.5;
  padding-right: $grid-gutter-width*0.5;
  box-sizing: border-box;
  flex: 0 0 auto;
}

@mixin grid-flex-col($i) {
  flex-basis: #{math.div($i, $grid-columns) * 100%};
  max-width: #{math.div($i, $grid-columns) * 100%};
}
